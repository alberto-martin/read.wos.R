x
lapply(x, function(x) print(x))
transpose(x)
lapply(transpose(x), function(x) print(x[1]))
lapply(x, function(x) print(x[1]))
lapply(x, function(x) print(x))
lapply(x, function(x) print(x))[[1]]
lapply(x, function(x) x)[[1]]
x
lapply(transpose(x), function(x) x)[[1]]
lapply(transpose(x), function(x) x[1])[[1]]
trim <- function (x) gsub('^\\s+|\\s+$', '', x)
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
cl <- makeCluster(n_cores)
clusterEvalQ(cl, {library(data.table)})
process_splitfield <- function(row) {
idcol = row[1]
splitfield = row[2]
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
dt <- data.table(x = idcol, y = split_list)
setnames(dt, c(x, y), c(idcol_name, splitcol_name))
dt
}
dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
read.wos.tw8 <- function(files, nrows=10000000L, save.file.name = F, parallel = F) {
# Getting list of fields
fields <- readLines(files[1], n = 1)
fields <- substring(fields, 4)
fields <- strsplit(fields, "\t")[[1]]
fields <- setdiff(fields, '')
if (save.file.name == T) {
fields <- c(fields, 'filename')
}
f_lines <- function(line) {
# Splits each row into a character vector, and updates the rows in the data.table
row <- strsplit(line, '\t')[[1]][1:length(fields)]
# if (save.file.name == T) {
#   row <- na.omit(row)
#   row <- c(row, file)
# }
row
}
f_row <- function(row) {
# Generates 1-row data.table
dt <- transpose(data.table(row))
colnames(dt) <- fields
dt
}
if (parallel == F) {
f_file <- function(file) {
# reads a file, and saves its lines as a character vector
lines  <- readLines(file)
lines <- lines[2:length(lines)]
lines_split <- lapply(lines, f_lines)
dt_rows <- lapply(lines_split, f_row)
dt <- rbindlist(dt_rows)
dt
}
dt_l <- lapply(files, f_file)
} else if (parallel == T) {
cl <- makeCluster(n_cores)
clusterEvalQ(cl, {library(data.table)})
f_file <- function(file) {
# reads a file, and saves its lines as a character vector
lines  <- readLines(file)
lines <- lines[2:length(lines)]
lines_split <- lapply(lines, f_lines)
dt_rows <- lapply(lines_split, f_row)
dt <- rbindlist(dt_rows)
dt
}
dt_l <- parLapply(cl, files, f_file)
stopCluster(cl)
}
dt <- rbindlist(dt_l)
dt
}
dt <- read.wos.tw8(list.files('files', full.names = T))
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
library(parallel)
library(parallel)
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
n_cores <- detectCores() - 1
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
cl <- makeCluster(n_cores)
clusterEvalQ(cl, {
library(data.table)
trim <- function (x) gsub('^\\s+|\\s+$', '', x)
})
process_splitfield <- function(row) {
idcol = row[1]
splitfield = row[2]
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
dt <- data.table(x = idcol, y = split_list)
setnames(dt, c(x, y), c(idcol_name, splitcol_name))
dt
}
dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
cl <- makeCluster(n_cores)
clusterEvalQ(cl, {
library(data.table)
trim <- function (x) gsub('^\\s+|\\s+$', '', x)
})
process_splitfield <- function(row) {
idcol = row[1]
splitfield = row[2]
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
dt <- data.table(x = idcol, y = split_list)
setnames(dt, c('x', 'y'), c(idcol_name, splitcol_name))
dt
}
dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
cl <- makeCluster(n_cores)
clusterEvalQ(cl, {
library(data.table)
trim <- function (x) gsub('^\\s+|\\s+$', '', x)
})
process_splitfield <- function(row) {
idcol = row[1]
splitfield = row[2]
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
dt <- data.table(x = idcol, y = split_list)
#setnames(dt, c('x', 'y'), c(idcol_name, splitcol_name))
dt
}
dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
# cl <- makeCluster(n_cores)
# clusterEvalQ(cl, {
#   library(data.table)
#   trim <- function (x) gsub('^\\s+|\\s+$', '', x)
#   })
process_splitfield <- function(row) {
idcol = row[1]
splitfield = row[2]
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
dt <- data.table(x = idcol, y = split_list)
#setnames(dt, c('x', 'y'), c(idcol_name, splitcol_name))
dt
}
#dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
dt_l <- lapply(transpose(source_dt), process_splitfield)
# stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
# cl <- makeCluster(n_cores)
# clusterEvalQ(cl, {
#   library(data.table)
#   trim <- function (x) gsub('^\\s+|\\s+$', '', x)
#   })
process_splitfield <- function(row) {
idcol = row[1]
print(idcol)
splitfield = row[2]
print(splitfield)
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
dt <- data.table(x = idcol, y = split_list)
#setnames(dt, c('x', 'y'), c(idcol_name, splitcol_name))
dt
}
#dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
dt_l <- lapply(transpose(source_dt), process_splitfield)
# stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
# cl <- makeCluster(n_cores)
# clusterEvalQ(cl, {
#   library(data.table)
#   trim <- function (x) gsub('^\\s+|\\s+$', '', x)
#   })
process_splitfield <- function(row) {
idcol = row[1]
print(idcol)
splitfield = row[2]
print(splitfield)
if (splitfield != '') {
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
} else {
split_list <- ''
}
dt <- data.table(x = idcol, y = split_list)
#setnames(dt, c('x', 'y'), c(idcol_name, splitcol_name))
dt
}
#dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
dt_l <- lapply(transpose(source_dt), process_splitfield)
# stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
split.simple <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';', nrows = 100000000L) {
idcol_name <- idcol
splitcol_name <- splitcol
# idcol <- source_dt[[idcol]]
# splitcol <- source_dt[[splitcol]]
# # creates empty data.table
# dt <- data.table(x=rep('0',nrows))
# l  <-  list(rep('0',2))
# i  <- 1
# for (j in 1:2) {
#   l[[i]] <- rep('0',nrows)
#   i <- i + 1
# }
# dt[, c(idcol_name, splitcol_name) := l, with = FALSE]
# dt[,x:=NULL]
# cl <- makeCluster(n_cores)
# clusterEvalQ(cl, {
#   library(data.table)
#   trim <- function (x) gsub('^\\s+|\\s+$', '', x)
#   })
process_splitfield <- function(row) {
idcol = row[1]
splitfield = row[2]
if (splitfield != '') {
split_list <- strsplit(splitfield, delimiter)[[1]]
split_list <- sapply(split_list, trim)
} else {
split_list <- ''
}
dt <- data.table(x = idcol, y = split_list)
#setnames(dt, c('x', 'y'), c(idcol_name, splitcol_name))
dt
}
#dt_l <- parLapply(cl, transpose(source_dt), process_splitfield)
dt_l <- lapply(transpose(source_dt), process_splitfield)
# stopCluster(cl)
dt <- rbindlist(dt_l)
dt
# i  <- 1L # row counter
# for (docix in 1:length(idcol)) {
#   id <- idcol[docix]
#   splitfield <- splitcol[docix]
#   split_list <- strsplit(splitfield, delimiter)[[1]]
#   for (el in split_list) {
#     el  <- trim(el)
#     if (length(el) > 0) {
#       set(dt,i,1L,id)
#       set(dt,i,2L,el)
#       i  <-  i + 1L
#     }
#   }
# }
# # deletes unused rows
# dt <- dt[dt[[1]] != '0']
# dt
}
dt_cr <- split.simple(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
View(dt_cr)
split.field <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';') {
if (splitcol == 'C1') {
split.c1(source_dt = source_dt, idcol = idcol, splitcol = 'C1', delimiter = delimiter)
} else {
split.simple.3(source_dt = source_dt, idcol = idcol, splitcol = splitcol, delimiter = delimiter)
}
}
split.simple.3 <- function(source_dt, idcol = 'UT', splitcol, delimiter = ';') {
setDT(source_dt)[, lapply(.SD, function(x) trim(unlist(tstrsplit(x, delimiter, fixed=TRUE)))), by = idcol][!is.na(splitcol)]
}
dt_cr2 <- split.simple.3(dt[, .(UT, CR)], idcol = 'UT', splitcol = 'CR', delimiter = ';')
